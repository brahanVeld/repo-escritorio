/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import conexion.conector;
import conexion.direccion;
import dom.accederFactura;
import dom.datosFactura;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Abrah√°n
 */
public class reporte extends javax.swing.JFrame {

   

    /**
     * Creates new form reporte
     */
    public reporte() {
        initComponents();
        limpiar();
        mostrarDatosalmacenados();
       // cargarDatosExistentes();
    }
    
    public String idReporte="";
    public reporte(String id){
        idReporte=id;
    }
    

    
    /***
     * Metodo que no devuelve nada
     * Limpia los componentes de texto.
     */
    void limpiar (){
        this.asesorOtro.setText("");
        this.descripcionServicio.setText("");
        this.fecha.setText("");
        this.horaInicio.setText("");
        this.nombreCliente.setText("");
        this.observacionesMateriales.setText("");
        this.personas.setText("");
        this.tiempoTrabajo.setText("");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        fecha = new javax.swing.JFormattedTextField();
        nombreCliente = new javax.swing.JTextField();
        poliza = new javax.swing.JCheckBox();
        personas = new javax.swing.JTextField();
        asesorOtro = new javax.swing.JTextField();
        tiempoTrabajo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcionServicio = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        observacionesMateriales = new javax.swing.JTextArea();
        horaInicio = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        guardar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yy-MM-dd"))));
        fecha.setToolTipText("yy-MM-dd");
        fecha.setCaretColor(new java.awt.Color(0, 0, 0));
        jPanel1.add(fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 110, -1));

        nombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreClienteKeyPressed(evt);
            }
        });
        jPanel1.add(nombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 500, 20));
        jPanel1.add(poliza, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 184, -1, 20));

        personas.setText("jTextField3");
        jPanel1.add(personas, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 184, 400, 20));

        asesorOtro.setText("jTextField4");
        jPanel1.add(asesorOtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, 230, 20));

        tiempoTrabajo.setText("jTextField5");
        jPanel1.add(tiempoTrabajo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 210, 130, -1));

        descripcionServicio.setColumns(20);
        descripcionServicio.setRows(5);
        jScrollPane2.setViewportView(descripcionServicio);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 560, 510));

        observacionesMateriales.setColumns(20);
        observacionesMateriales.setRows(5);
        jScrollPane3.setViewportView(observacionesMateriales);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 823, 550, 100));

        horaInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        horaInicio.setToolTipText("13:02:03");
        jPanel1.add(horaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, 110, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondoReporte.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 31, -1, -1));

        jToolBar1.setRollover(true);

        guardar.setText("Guardar");
        guardar.setFocusable(false);
        guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        jToolBar1.add(guardar);

        cancelar.setText("Cancelar");
        cancelar.setFocusable(false);
        cancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(cancelar);

        jPanel1.add(jToolBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 25));

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        try {
            // TODO add your handling code here:
            ////ejecuto metodo para guardar\\\\\

            this.crearReporte();
        } catch (IOException ex) {
            Logger.getLogger(reporte.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_guardarActionPerformed

    /**
     * Metodo para buscar el cliente
     * @param evt es la tecla enter, abre la ventana de clientes y cierra la actual.
     */
    
    direccion _direccion= new direccion();
    datosFactura _datos= new datosFactura();
    private void nombreClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreClienteKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER){
            
            try {
                String fecha="", horaInicio="", observaciones="", asesor="", personas="", descripcion="", tiempo="";
                String poliza="0";
                if(!this.fecha.getText().isEmpty()){
                    fecha=this.fecha.getText();
                }    if(!this.horaInicio.getText().isEmpty()){
                    horaInicio=this.horaInicio.getText();
                }    if(!this.observacionesMateriales.getText().isEmpty()){
                    observaciones=this.observacionesMateriales.getText();
                }    if(!this.asesorOtro.getText().isEmpty()){
                    asesor=this.asesorOtro.getText();
                }    if(!this.personas.getText().isEmpty()){
                    personas=this.personas.getText();
                }    if(this.poliza.isSelected()==true){
                    poliza="1";
                }    if(!this.descripcionServicio.getText().isEmpty()){
                    descripcion=this.descripcionServicio.getText();
                }    if(!this.tiempoTrabajo.getText().isEmpty()){
                    tiempo=this.tiempoTrabajo.getText();
                }    _direccion.guardarReporte(fecha, horaInicio, poliza, personas, asesor, tiempo, descripcion, observaciones);
               // _datos.setIdCliente(this.nombreCliente.getText());
                guardar(_datos, nombreCliente.getText());
                _clientes= new clienteBusqueda();
                _clientes.setVisible(true);
                dispose();
            } catch (IOException ex) {
                Logger.getLogger(reporte.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_nombreClienteKeyPressed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        try {
            // TODO add your handling code here:
            this.limpiar();
            this.limpiarInfor();
        } catch (IOException ex) {
            Logger.getLogger(reporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cancelarActionPerformed

     static void guardar(accederFactura f, String idCliente){ 
        f.setIdCliente(idCliente);
    }
    
     
     static String ver(accederFactura f){
       String aux="";
       if(!f.getIdCliente().isEmpty()){
           aux=f.getIdCliente();
       }
       return aux;
   }
    
    clienteBusqueda _clientes;
    conector _conexion= new conector();
    void crearReporte() throws IOException{
        
        if(!this.nombreCliente.getText().isEmpty()&&!this.fecha.getText().isEmpty()&&
                !this.tiempoTrabajo.getText().isEmpty()&&!this.personas.getText().isEmpty()&&!this.descripcionServicio.getText().isEmpty()){
              String pol="";
            if(this.poliza.isSelected()==true){
                pol="1";
            }else{
                pol="0";
            }
             _conexion.mariaDB();
            if(!_direccion.leeridReporte().isEmpty()){
                String idr=_direccion.leeridReporte();
                if(_conexion.verificarDato("select * from reportes where id="+idr+"")){
                    int validar=JOptionPane.showConfirmDialog(rootPane,"¬øDesea actualizar el reporte?","Modificar reporte", JOptionPane.OK_CANCEL_OPTION);
                    if(validar==JOptionPane.OK_OPTION){
                       _conexion.update("update reportes set fecha='"+this.fecha.getText()+"', horaInicio='"+this.horaInicio.getText()+"', idCliente='"+this.nombreCliente.getText()+"',"
                               + "poliza='"+pol+"', persona='"+this.personas.getText()+"', asesor='"+this.asesorOtro.getText()+"',"
                                       + "personas='"+this.personas.getText()+"', tiempoTrabajo='"+this.tiempoTrabajo.getText()+"',"
                                               + "servicioRealizado='"+this.descripcionServicio.getText()+"', materiales='"+this.observacionesMateriales+"',"
                                                       + "procesado=0, idUsuario='"+this._direccion.leerUsuario()+"' where id="+idr+"");
                       this.limpiar();
            limpiarInfor();
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Si no quiere actualizar el reporte solo de clic en cancelar de nuevo.");
                    }
                }
            }else{
                 String sql="insert into reportes (fecha, horaInicio, idCliente, poliza, personas, asesor, persona, tiempoTrabajo, servicioRealizado,"
                + "materiales, procesado, idUsuario) values('"+this.fecha.getText()+"','"+this.horaInicio.getText()+"',"
                    + "'"+this.nombreCliente.getText()+"','"+pol+"','"+this.personas.getText()+"','"+this.asesorOtro.getText()+"',"
                    + "'','"+this.tiempoTrabajo.getText()+"','"+this.descripcionServicio.getText()+"','"+this.observacionesMateriales.getText()+"',"
                    + "0,'"+this._direccion.leerUsuario()+"')";
           
            _conexion.update(sql);
            this.limpiar();
            limpiarInfor();
            }
            
            
            
            
            
          
           
            _conexion.cerrarConeccion();
            
            
        }else{
            JOptionPane.showMessageDialog(rootPane, "Falta informaci√≥n para procesar su reporte.");
        }
        
        
        
    }
    
    
    void mostrarDatosalmacenados(){
        if(!_direccion.horaInicio().isEmpty()
                
                ){
            
            
            this.horaInicio.setText(_direccion.horaInicio());
            
        }
        if(!_direccion.idCliente().isEmpty()){
            this.nombreCliente.setText(_direccion.idCliente());
        }
        if(!_direccion.leerfecha().isEmpty()){
            this.fecha.setText(_direccion.leerfecha());
        }
        if(!_direccion.materiales().isEmpty()){
            this.observacionesMateriales.setText(_direccion.materiales());
        }
        if(!_direccion.persona().isEmpty()){
            this.personas.setText(_direccion.persona());
        }
        if(!_direccion.poliza().isEmpty()){
            if(_direccion.poliza().equals("1")){
                this.poliza.setSelected(true);
            }
        }
        if(!_direccion.servicio().isEmpty()){
            this.descripcionServicio.setText(_direccion.servicio());
        }
        if(!_direccion.tiempo().isEmpty()){
            this.tiempoTrabajo.setText(_direccion.tiempo());
        }
        if(!_direccion.asesor().isEmpty()){
            this.asesorOtro.setText(_direccion.asesor());
        }
        
        
    }
    
    
    void limpiarInfor() throws IOException{
        _direccion.guardarReporte("", "", "", "", "", "", "", "");
        _direccion.guardarCliente("");
        _direccion.guardaridReporte("");
    }
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reporte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField asesorOtro;
    private javax.swing.JButton cancelar;
    private javax.swing.JTextArea descripcionServicio;
    private javax.swing.JFormattedTextField fecha;
    private javax.swing.JButton guardar;
    private javax.swing.JFormattedTextField horaInicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField nombreCliente;
    private javax.swing.JTextArea observacionesMateriales;
    private javax.swing.JTextField personas;
    private javax.swing.JCheckBox poliza;
    private javax.swing.JTextField tiempoTrabajo;
    // End of variables declaration//GEN-END:variables
}
